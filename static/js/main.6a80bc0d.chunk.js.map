{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","setMovies","useState","setQuery","hasError","setHasError","isLoading","setIsLoading","foundMovie","setFoundMovie","firstSearch","setFirstSearch","prepareMovie","Poster","Title","Plot","imdbID","handleFormSubmit","useCallback","e","a","preventDefault","response","onSubmit","htmlFor","type","id","placeholder","cn","value","onChange","event","target","disabled","onClick","find","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a80bc0d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=20ddb77b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[],\n  setMovies: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [query, setQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [foundMovie, setFoundMovie] = useState<MovieData | null>(null);\n  const [firstSearch, setFirstSearch] = useState(false);\n\n  const defaultPicture\n    = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  const prepareMovie = (movie: MovieData) => {\n    const {\n      Poster,\n      Title,\n      Plot,\n      imdbID,\n    } = movie;\n\n    return {\n      title: Title,\n      description: Plot,\n      imgUrl: Poster || defaultPicture,\n      imdbId: imdbID,\n      imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n    };\n  };\n\n  const addMovie = () => {\n    if (movies.find(movie => movie.imdbId === foundMovie?.imdbID)) {\n      setQuery('');\n      setFoundMovie(null);\n\n      return;\n    }\n\n    setMovies(prepareMovie(foundMovie as MovieData));\n    setFirstSearch(false);\n    setQuery('');\n    setFoundMovie(null);\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setHasError(false);\n  };\n\n  const handleFormSubmit = useCallback(async (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    try {\n      e.preventDefault();\n      setIsLoading(true);\n\n      const response = await getMovie(query);\n\n      if ('Response' in response && response.Response === 'False') {\n        setHasError(true);\n        setFoundMovie(null);\n      } else {\n        setHasError(false);\n        setFoundMovie(response as MovieData);\n        setFirstSearch(true);\n      }\n    } catch (error) {\n      setHasError(true);\n      setFoundMovie(null);\n      setFirstSearch(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [query]);\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn(\n                'input',\n                {\n                  'is-danger': hasError,\n                },\n              )}\n              value={query}\n              onChange={handleQuery}\n            />\n          </div>\n\n          {hasError && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"errorMessage\"\n            >\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          {firstSearch\n            ? (\n              <div className=\"control\">\n                <button\n                  data-cy=\"searchButton\"\n                  type=\"submit\"\n                  className={cn(\n                    'button is-light',\n                    {\n                      'is-loading': isLoading,\n                    },\n                  )}\n                  disabled={!query}\n                >\n                  Search again\n                </button>\n              </div>\n            ) : (\n              <div className=\"control\">\n                <button\n                  data-cy=\"searchButton\"\n                  type=\"submit\"\n                  className={cn(\n                    'button is-light',\n                    {\n                      'is-loading': isLoading,\n                    },\n                  )}\n                  disabled={!query}\n                >\n                  Find a movie\n                </button>\n              </div>\n            )}\n\n          <div className=\"control\">\n            {foundMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {foundMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={prepareMovie(foundMovie)} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={(movie: Movie) => setMovies([...movies, movie])}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}